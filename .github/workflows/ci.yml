name: Credit Risk Model CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  MLFLOW_TRACKING_URI: http://localhost:5000
  DOCKER_BUILDKIT: 1

jobs:
  lint-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-cov

    - name: Run linter
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
      env:
        TEST_ENV: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.ref == 'refs/heads/main'

  build-deploy:
    name: Build and Deploy
    needs: lint-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/credit-risk-model:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/credit-risk-model:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example:
        # ssh ${{ secrets.STAGING_SSH }} "docker-compose pull && docker-compose up -d"
      env:
        STAGING_ENV: true

  mlflow-tracking:
    name: MLflow Model Tracking
    runs-on: ubuntu-latest
    needs: lint-test
    if: github.ref == 'refs/heads/main'

    services:
      mlflow:
        image: mlflow/mlflow
        ports:
          - "5000:5000"
        env:
          MLFLOW_TRACKING_URI: http://localhost:5000
        options: >-
          --health-cmd "curl -f http://localhost:5000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Train and log model
      run: |
        python src/train.py
      env:
        MLFLOW_TRACKING_URI: http://localhost:5000
        MLFLOW_EXPERIMENT_NAME: "credit_risk_production"

    - name: Register model
      run: |
        python src/register_model.py --run-id $(grep -oP '(?<=Run ID: ).*' train.log) --model-name "credit_risk_model"
      if: always()

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš¨ Model training failed! Please check the logs.'
          })